{"version":3,"sources":["components/SearchContainer/SearchBar/SearchBar.module.scss","components/Currently/Currently.module.scss","components/SearchContainer/SearchBar/SearchBar.jsx","components/SearchContainer/SearchContainer.jsx","components/Temperature/Temperature.jsx","components/Currently/Currently.jsx","App.jsx","serviceWorker.js","index.js","components/SearchContainer/SearchContainer.module.scss","components/Temperature/Temperature.module.scss"],"names":["module","exports","SearchBar","props","useState","address","setAddress","value","onChange","onSelect","geocodeByAddress","then","results","getLatLng","latLng","setGeoLocation","catch","error","console","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","length","classes","Input","InputActive","Suggestions","map","suggestion","active","SuggestionItemActive","SuggestionItem","description","SearchContainer","input","handleGeoLocation","Temperature","isCelsius","setIsCelsius","Math","floor","temperature","fahr","setFahr","cel","setCel","useEffect","class","join","onClick","text","Currently","icon","log","currentWeather","box","summary","color","replace","toUpperCase","autoplay","style","width","App","lat","lng","geoLoaction","forecast","setForecast","Axios","get","response","data","geoLoc","currently","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7f5285a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"SearchBar_Input__26PLK\",\"InputActive\":\"SearchBar_InputActive__2gtGW\",\"Suggestions\":\"SearchBar_Suggestions__16WHH\",\"SuggestionItem\":\"SearchBar_SuggestionItem__R1QEk\",\"SuggestionItemActive\":\"SearchBar_SuggestionItemActive__3fQbq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Currently\":\"Currently_Currently__2nNyy\",\"box\":\"Currently_box__3mbkq\",\"temperature\":\"Currently_temperature__17tPW\"};","import React, { useState } from 'react';\nimport classes from './SearchBar.module.scss';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng\n} from 'react-places-autocomplete';\n\nconst SearchBar = props => {\n  const [address, setAddress] = useState('');\n\n  const handleChange = address => {\n    setAddress(address);\n  };\n\n  const handleSelect = address => {\n    setAddress(address);\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => props.setGeoLocation(latLng))\n      .catch(error => console.error('Error', error));\n  };\n\n  return (\n    <PlacesAutocomplete\n      value={address}\n      onChange={handleChange}\n      onSelect={handleSelect}>\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <div>\n          <input\n            {...getInputProps({\n              placeholder: 'Search Places ...',\n              className: `location-search-input ${\n                suggestions.length === 0 ? classes.Input : classes.InputActive\n              }`\n            })}\n          />\n          <div\n            className={`autocomplete-dropdown-container ${\n              suggestions.length === 0 ? null : classes.Suggestions\n            }`}>\n            {loading && (\n              <div>\n                <p>Loading...</p>\n              </div>\n            )}\n            {suggestions.map(suggestion => {\n              const className = suggestion.active\n                ? `suggestion-item--active ${classes.SuggestionItemActive}`\n                : `suggestion-item ${classes.SuggestionItem}`;\n\n              return (\n                <div\n                  {...getSuggestionItemProps(suggestion, {\n                    className\n                  })}>\n                  <span>{suggestion.description}</span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </PlacesAutocomplete>\n  );\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport classes from './SearchContainer.module.scss';\nimport SearchBar from './SearchBar/SearchBar';\n\nconst SearchContainer = props => {\n  return (\n    <div className={classes.SearchContainer}>\n      <h1>Search your city</h1>\n      <div className={classes.input}>\n        <SearchBar setGeoLocation={props.handleGeoLocation} />\n      </div>\n    </div>\n  );\n};\n\nexport default SearchContainer;\n","import React, { useState, useEffect } from 'react';\nimport classes from './Temperature.module.scss';\n\nconst Temperature = props => {\n  const [isCelsius, setIsCelsius] = useState(false);\n  const [fahr, setFahr] = useState(Math.floor(props.temperature));\n  const [cel, setCel] = useState(\n    Math.floor((props.temperature - 32) * (5 / 9))\n  );\n\n  useEffect(() => {\n    setCel(Math.floor((props.temperature - 32) * (5 / 9)));\n    setFahr(Math.floor(props.temperature));\n  }, [props.temperature]);\n\n  return (\n    <div\n      className={[classes.Temperature, props.class].join(' ')}\n      onClick={() => setIsCelsius(!isCelsius)}>\n      <p>\n        {isCelsius ? cel : fahr}\n        <span>{isCelsius ? '°C' : '°F'}</span>\n      </p>\n      <p className={classes.text}>\n        Click on the temperature\n        <br />\n        to change it to {isCelsius ? 'Fahrenheit' : 'Celcius'}\n      </p>\n    </div>\n  );\n};\n\nexport default Temperature;\n","import React from 'react';\nimport Skycons from 'react-skycons';\nimport Temperature from '../Temperature/Temperature';\nimport classes from './Currently.module.scss';\n\nconst Currently = props => {\n  const convertIcon = icon => icon.replace(/-/g, '_').toUpperCase();\n  console.log(props.currentWeather.temperature);\n\n  return (\n    <div className={classes.Currently}>\n      <div className={classes.box}>\n        <p>{props.currentWeather.summary}</p>\n        <Temperature\n          temperature={props.currentWeather.temperature}\n          class={classes.temperature}\n        />\n      </div>\n\n      <Skycons\n        color='white'\n        icon={convertIcon(props.currentWeather.icon)}\n        autoplay={true}\n        style={{ width: '250wsw3wswpx' }}\n      />\n    </div>\n  );\n};\n\nexport default Currently;\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport SearchContainer from './components/SearchContainer/SearchContainer';\nimport Axios from 'axios';\nimport Currently from './components/Currently/Currently';\n\nconst App = () => {\n  const [geoLoaction, setGeoLocation] = useState({ lat: null, lng: null });\n  const [forecast, setForecast] = useState(null);\n\n  const proxyurl = 'https://cors-anywhere.herokuapp.com/';\n  const baseUrl = 'https://api.darksky.net/forecast/';\n  const apiKey = '80e270a12de88dadd1b2b981d95ef3f3/';\n\n  useEffect(() => {\n    if (geoLoaction.lat && geoLoaction.lng) {\n      Axios.get(\n        `${proxyurl}${baseUrl}${apiKey}${geoLoaction.lat},${geoLoaction.lng}`\n      )\n        .then(response => {\n          setForecast(response.data);\n          console.log(response.data);\n        })\n        .catch(error => console.log(error));\n    }\n  }, [geoLoaction]);\n\n  const handleGeoLocation = geoLoc => {\n    if (geoLoc.lat && geoLoc.lng) {\n      setGeoLocation({ lat: geoLoc.lat, lng: geoLoc.lng });\n    }\n  };\n\n  return (\n    <div className='App'>\n      <SearchContainer handleGeoLocation={handleGeoLocation} />\n      {forecast ? <Currently currentWeather={forecast.currently} /> : null}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchContainer\":\"SearchContainer_SearchContainer__C0lPY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Temperature\":\"Temperature_Temperature__mVnX4\",\"text\":\"Temperature_text__1ljNN\"};"],"sourceRoot":""}